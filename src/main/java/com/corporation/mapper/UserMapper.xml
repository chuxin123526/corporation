<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.corporation.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.corporation.po.User" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="userName" property="userName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="registerTime" property="registerTime" jdbcType="TIMESTAMP" />
    <result column="sex" property="sex" jdbcType="CHAR" />
    <result column="realName" property="realName" jdbcType="VARCHAR" />
    <result column="phoneNumber" property="phoneNumber" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="college" property="college" jdbcType="VARCHAR" />
    <result column="major" property="major" jdbcType="VARCHAR" />
    <result column="period" property="period" jdbcType="CHAR" />
    <result column="status" property="status" jdbcType="CHAR" />
    <result column="introduction" property="introduction" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, userName, password, registerTime, sex, realName, phoneNumber, email, college, 
    major, period, status, introduction
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.corporation.po.User" >
    insert into user (id, userName, password, 
      registerTime, sex, realName, 
      phoneNumber, email, college, 
      major, period, status, introduction
      )
    values (#{id,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{registerTime,jdbcType=TIMESTAMP}, #{sex,jdbcType=CHAR}, #{realName,jdbcType=VARCHAR}, 
      #{phoneNumber,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{college,jdbcType=VARCHAR}, 
      #{major,jdbcType=VARCHAR}, #{period,jdbcType=CHAR}, #{status,jdbcType=CHAR}, #{introduction,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.corporation.po.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userName != null" >
        userName,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="registerTime != null" >
        registerTime,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="realName != null" >
        realName,
      </if>
      <if test="phoneNumber != null" >
        phoneNumber,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="college != null" >
        college,
      </if>
      <if test="major != null" >
        major,
      </if>
      <if test="period != null" >
        period,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="introduction != null" >
        introduction,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null" >
        #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=CHAR},
      </if>
      <if test="realName != null" >
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null" >
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="college != null" >
        #{college,jdbcType=VARCHAR},
      </if>
      <if test="major != null" >
        #{major,jdbcType=VARCHAR},
      </if>
      <if test="period != null" >
        #{period,jdbcType=CHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=CHAR},
      </if>
      <if test="introduction != null" >
        #{introduction,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.corporation.po.User" >
    update user
    <set >
      <if test="userName != null" >
        userName = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null" >
        registerTime = #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="realName != null" >
        realName = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null" >
        phoneNumber = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="college != null" >
        college = #{college,jdbcType=VARCHAR},
      </if>
      <if test="major != null" >
        major = #{major,jdbcType=VARCHAR},
      </if>
      <if test="period != null" >
        period = #{period,jdbcType=CHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="introduction != null" >
        introduction = #{introduction,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.corporation.po.User" >
    update user
    set userName = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      registerTime = #{registerTime,jdbcType=TIMESTAMP},
      sex = #{sex,jdbcType=CHAR},
      realName = #{realName,jdbcType=VARCHAR},
      phoneNumber = #{phoneNumber,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      college = #{college,jdbcType=VARCHAR},
      major = #{major,jdbcType=VARCHAR},
      period = #{period,jdbcType=CHAR},
      status = #{status,jdbcType=CHAR},
      introduction = #{introduction,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <!-- 检查用户名是否被注册 -->
  <select id="checkUserNameAvailable" parameterType="com.corporation.po.User" resultType="java.lang.Integer">
  	select count(*) from user where userName = #{userName} limit 1 
  </select>
   
   <!-- 根据邮箱获取用户ID -->
  <select id="selectIDByEmail" parameterType="com.corporation.po.User" resultType="com.corporation.po.User">
  		select id from user where email = #{email}
  </select>
  
  <!-- 检查邮箱是否被注册-->
  <select id = "checkEmailAvailable" parameterType="com.corporation.po.User" resultType="java.lang.Integer">
  	select count(*) from user where email = #{email} limit 1
  </select>
  
  <!-- 根据用户名和密码查找记录条数 -->
  <select id = "checkUserByNameAndPassword"  parameterType="com.corporation.po.User" resultType="java.lang.Integer">
 	select count(*) from user where userName = #{userName} and password = #{password} and status = '1' limit 1
  </select>

  <!-- 根据用户名查找用户ID -->
   <select id = "selectIDbyUserName"  parameterType="com.corporation.po.User" resultType="com.corporation.po.User">
 	select id from user where userName = #{userName} limit 1
  </select>
  
  <!-- 获取用户数量 -->
  <select id = "count" resultType = "java.lang.Integer">
  	select count(*) from user 
  </select>
  
  <!-- 根据分页条件获取分页列表 -->
  <select id = "list" resultType="com.corporation.po.User" parameterType="com.corporation.web.vo.UserManagerListCondition">
  	select <include refid="Base_Column_List" /> from user limit ${(requestPage-1)*pageCount} , #{pageCount}
  </select>
</mapper>